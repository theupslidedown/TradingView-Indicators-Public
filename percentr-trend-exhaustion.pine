// © upslidedown
// One of the first indicators I ever used was %R, and I realized that with crypto strategies a period of 112 
// provided very interesting results in trend following strategies. This indicator intends to mix standard %R
// with the longer period %R and show key areas of interest. Using classic overbought/oversold logic, the 
// indicator highlights a key trend and a subsequent break in that trend. When this condition is detected it 
// will print a reversal arrow down. This is one of my odder ideas that appears to have some merit, so I'm 
// publicly publishing for the community to find. If you find this useful please reach out and let me know.


//@version=5

// Change log
// [*] Increase version from 2.0 -> 2.1
// [*] Try to follow the Pinecoders conventions as much as possible https://www.tradingview.com/pine-script-docs/en/v5/writing/Style_guide.html#constant-declarations
//     use SNAKE_CASE for constants and group them, use spaces around operators, use designated initializer wherever is possible etc...
// [*] Change the scale from [-100, 0] -> [0, 100]
// [*] Change the way to create signals for TTS
// [*] Clean up some unused code
// [*] Remove precision from indicator arguments and let the chart to decide that
// [*] Do not use var and varip if not nessesary for the script logic
// Questions:
//    Why use INVINSIBLE instead of na or display = display.none?
//    Is the explicit_plot_zorder still nessesary in the new version?
// Suggestion:
//    I would prefer to have sections in the code and collapse them by pressing the ctr + K + 0 but this is usefull for larger scripts
//    Maybe grouping all plots plotshapes as the link above suggests will make the scripts main logic more readable

string VERSION = "v2.1"
indicator(title = "%R Trend Exhaustion [upslidedown]",
          shorttitle = "%RTE" + VERSION,
          format = format.price,
          explicit_plot_zorder = true)


import HeWhoMustNotBeNamed/ta/1
import jason5480/tts_convention/3 as conv

// Constants

// Group names
string GROUP_SETTINGS = "Settings " + VERSION
string GROUP_DISPLAY = "Display"
string GROUP_SLOW_SIGNAL = "Slow Signal"
string GROUP_FAST_SIGNAL = "Fast Signal"
string GROUP_ALERTS = "Alerts"
string GROUP_STRATEGY = "Strategy"

// colors
color INVISIBLE = color.rgb(0, 0, 0, 100)
color SHORT_COLOR = color.white
color LONG_COLOR = #FFF58B
color PIVOT_COLOR = color.white

// Plot shape positions
int BULL_SIGNAL_LOC = -5
int BEAR_SIGNAL_LOC = 105

// Enum values
string MODE_1 = "1 Oscillator Mode"
string MODE_2 = "2 Overlay Mode (top and bottom no oscillator)"
string MODE_3 = "3 Candle Mode"

string FORMULA_1 = "Standard (2 Period)"
string FORMULA_2 = "Average"

string STRATEGY_1 = "1 Trend Following @ Square"
string STRATEGY_2 = "2 Reversal @ Square"
string STRATEGY_3 = "3 Reversal Trade @ Triangle"
string STRATEGY_4 = "4 Re-enter Trend Trade @ Triangle"
string STRATEGY_5 = "5 Pings"

// inputs
bullColorInput = input.color(defval = #2466A7, title = 'Cold Color', group = GROUP_DISPLAY, inline = "col")
bearColorInput = input.color(defval = #CA0017, title = 'Hot Color', group = GROUP_DISPLAY, inline = "col")

versionInput = input.string(defval = VERSION, title = "Version", options = [VERSION], group = GROUP_SETTINGS)
modeInput = input.string(defval = MODE_1, title = "Display Mode", options = [MODE_1, MODE_2, MODE_3], tooltip = "Modes 2 & 3 are more advanced and expect that you most likely overlay the indicator on top of price action itself or another indiciator using TradingView's object tree panel.", group = GROUP_SETTINGS)
formulaInput = input.string(FORMULA_1, "Formula", options = [FORMULA_1, FORMULA_2], group = GROUP_SETTINGS)

srcInput = input.source(defval = close, title = "Source", group = GROUP_SETTINGS)
thresholdInput = input.int(defval = 20, title = "Exhaustion Threshold", minval = 1, maxval = 50, group = GROUP_SETTINGS, tooltip = "Sets the overbought/oversold zone size and offset. Lower values will produce less results, higher values towards 50 will produce many results.")
smoothTypeInput = input.string(defval = 'ema', title = "Smoothing Type", options = ['sma', 'ema', 'hma', 'rma', 'wma', 'vwma', 'swma', 'highlow', 'linreg', 'median', 'mom', 'percentrank'], group = GROUP_SETTINGS)
averageMaInput = input.int(defval = 3, title = "Average Formula MA", group = GROUP_SETTINGS)

plotShadingInput = input.bool(defval = true, title = "Fill Gradients in OB/OS Zone", group = GROUP_DISPLAY)
plotCrossesInput = input.bool(defval = false, title = "Highlight Crossovers", group = GROUP_DISPLAY, tooltip = "Experimental idea for plotting crossovers with attempted bull/bear coloring. This needs to be combined with other TA but typically crossover condition results in interesting price action during or after.")
plotExpirationInput = input.bool(defval = false, title = "Plot Expiration", group = GROUP_DISPLAY, tooltip = "Experimental idea for plotting expiration, highlighting market phases.")

fastLengthInput = input.int(defval = 21, title = "Fast Length", group = GROUP_FAST_SIGNAL)
fastSmoothingLengthInput = input.int(defval = 7, title = "Smoothing Length", group = GROUP_FAST_SIGNAL)

slowLengthInput = input.int(defval = 112, title = "Slow Length", minval = 1, group = GROUP_SLOW_SIGNAL)
slowSmoothingLengthInput = input.int(defval = 3, title = "Smoothing Length", group = GROUP_SLOW_SIGNAL)

bullReversalTxt = input.string(defval = "Arrow Down: Overbought trend is exhausted", title = "OB Break ▼", group = GROUP_ALERTS)
bearReversalTxt = input.string(defval = "Arrow Up: Oversold trend is exhausted", title = "OS Break ▲", group = GROUP_ALERTS)
bullStartTxt = input.string(defval = "Possible overbought trend exhaustion", title = "OB Start ⏹ ", group = GROUP_ALERTS)
bearStartTxt = input.string(defval = "Possible oversold trend exhaustion", title = "OS Start ⏹", group = GROUP_ALERTS)
bullCrossTxt = input.string(defval = "Bullish crossover", title = "Bull Cross ⏺", group = GROUP_ALERTS)
bearCrossTxt = input.string(defval = "Bearish crossover", title = "Bear Cross ⏺", group = GROUP_ALERTS)

longDealsEnabled = input.bool(defval = true, title = "Enable Long Deals", group = GROUP_STRATEGY)
shortDealsEnabled = input.bool(defval = true, title = "Enable Short Deals", group = GROUP_STRATEGY)

strategyEntryInput = input.string(defval = STRATEGY_1, title = "Strategy Entry", options = [STRATEGY_1, STRATEGY_2, STRATEGY_3, STRATEGY_4, STRATEGY_5], group = GROUP_STRATEGY)

// More constants that depend on inputs
color BULL_COLOR_LIGHT = color.new(bullColorInput, 70)
color BEAR_COLOR_LIGHT = color.new(bearColorInput, 70)
color BULL_COLOR_MEDIUM = color.new(bullColorInput, 60)
color BEAR_COLOR_MEDIUM = color.new(bearColorInput, 60)
bool COMPACT = modeInput == MODE_2
bool USE_AVERAGE = formulaInput == FORMULA_2
color GRADIENT_BULL_COLOR = plotShadingInput ? color.new(bullColorInput, 100) : INVISIBLE
color GRADIENT_BEAR_COLOR = plotShadingInput ? color.new(bearColorInput, 100) : INVISIBLE

int TOP_LOC = 100
int BAND_1_LOC = 100 - thresholdInput
int MIDDLE_LOC = 50
int BAND_0_LOC = thresholdInput
int BOTTOM_LOC = 0

// functions
_pr(length) =>
	float max = ta.highest(length)
	float min = ta.lowest(length)
	100 * (srcInput - min) / (max - min)

float s_percentR = _pr(fastLengthInput)
float l_percentR = _pr(slowLengthInput)
float avg_percentR = math.avg(s_percentR, l_percentR)

if fastSmoothingLengthInput > 1
    s_percentR := ta.ma(s_percentR, smoothTypeInput, fastSmoothingLengthInput)
if slowSmoothingLengthInput > 1
    l_percentR := ta.ma(l_percentR, smoothTypeInput, slowSmoothingLengthInput)
if averageMaInput > 1
    avg_percentR := ta.ma(avg_percentR, smoothTypeInput, averageMaInput)

var was_ob = false
var was_os = false

// ob/os logic
bool overbought = s_percentR >= BAND_1_LOC and l_percentR >= BAND_1_LOC
bool oversold = s_percentR <= BAND_0_LOC and l_percentR <= BAND_0_LOC
bool ob_reversal = not overbought and overbought[1]
bool os_reversal = not oversold and oversold[1]
bool ob_trend_start = overbought and not overbought[1]
bool os_trend_start = oversold and not oversold[1]

if USE_AVERAGE 
    // use average
    overbought := avg_percentR >= BAND_1_LOC
    oversold := avg_percentR <= BAND_0_LOC
    ob_reversal := not overbought and overbought[1]
    os_reversal := not oversold and oversold[1]
    ob_trend_start := overbought and not overbought[1]
    os_trend_start := oversold and not oversold[1]


// detect crossovers for potential "in between" signals
bool cross_bear = ta.crossover(l_percentR, s_percentR)
bool cross_bull = ta.crossunder(l_percentR, s_percentR)


// Print lines for stuff
top = hline(price = modeInput == MODE_1 ? TOP_LOC : na, title = 'Top', color = BEAR_COLOR_MEDIUM, linestyle = hline.style_solid)
band1 = hline(price = modeInput == MODE_1 ? BAND_1_LOC : na, title = 'Top Threshold', color = BEAR_COLOR_MEDIUM, linestyle = hline.style_solid)
middle = hline(price = modeInput == MODE_1 ? MIDDLE_LOC : na, title = 'Middle Line', color = color.new(#2F4F4F, 50), linestyle = hline.style_solid)
band0 = hline(price = modeInput == MODE_1 ? BAND_0_LOC : na, title = 'Bottom Threshold', color = BULL_COLOR_MEDIUM, linestyle = hline.style_solid)
bottom = hline(price = modeInput == MODE_1 ? BOTTOM_LOC : na, title = 'Bottom', color = BULL_COLOR_MEDIUM, linestyle = hline.style_solid)


// plot %R
p_fastr = plot(series = modeInput == MODE_1 and not USE_AVERAGE ? s_percentR : na, title = "Fast Period %R", color = SHORT_COLOR, linewidth = 1)
p_slowr = plot(series = modeInput == MODE_1 and not USE_AVERAGE ? l_percentR : na, title = "Slow Period %R", color = LONG_COLOR, linewidth = 1)
p_avgr = plot(series = modeInput == MODE_1 and USE_AVERAGE ? avg_percentR : na, title = "Average Formula %R", color = SHORT_COLOR, linewidth = 1)


fill(p_fastr, p_slowr, TOP_LOC, BAND_1_LOC, top_color = color.new(GRADIENT_BEAR_COLOR, 10), bottom_color = GRADIENT_BEAR_COLOR, title = "Overbought Gradient Fill")
fill(p_fastr, p_slowr, BAND_0_LOC,  BOTTOM_LOC, top_color = GRADIENT_BULL_COLOR, bottom_color = color.new(GRADIENT_BULL_COLOR, 10), title = "Oversold Gradient Fill")


plotshape(series = ob_reversal ? BEAR_SIGNAL_LOC : na, title = "Overbought Trend Reversal ▼", style = shape.triangledown, location = modeInput == MODE_1 ? location.absolute : modeInput == MODE_3 ? location.abovebar : location.top, color = bearColorInput, text = '', textcolor = INVISIBLE, size = size.tiny)
plotshape(series = os_reversal ? BULL_SIGNAL_LOC : na, title = "Oversold Trend Reversal ▲", style = shape.triangleup, location = modeInput == MODE_1 ? location.absolute : modeInput == MODE_3 ? location.belowbar : location.bottom, color = bullColorInput, text = '', textcolor = INVISIBLE, size = size.tiny)
plotshape(series = overbought ? BEAR_SIGNAL_LOC : na, title = "Overbought Trend Warning ■", style = shape.square, location = modeInput == MODE_1 ? location.absolute : modeInput == MODE_3 ? location.abovebar : location.top, color = BEAR_COLOR_MEDIUM, text = '', textcolor = INVISIBLE, size = size.tiny)
plotshape(series = oversold ? BULL_SIGNAL_LOC : na, title = "Oversold Trend Warning ■", style = shape.square, location = modeInput == MODE_1 ? location.absolute : modeInput == MODE_3 ? location.belowbar : location.bottom, color = BULL_COLOR_MEDIUM, text = '', textcolor = INVISIBLE, size = size.tiny)


plot(series = not COMPACT and plotCrossesInput and (cross_bull or cross_bear) ? l_percentR : na, title = "Crossover Dot (small)", style = plot.style_circles, color = PIVOT_COLOR, linewidth = 4)
plot(series = not COMPACT and plotCrossesInput and (cross_bull or cross_bear) ? l_percentR : na, title = "Crossover Dot (big)", style = plot.style_circles, color = cross_bull ? BULL_COLOR_LIGHT : BEAR_COLOR_LIGHT, linewidth = 12)

plotchar(series = ob_trend_start ? BEAR_SIGNAL_LOC : na, char = "◡", color=bearColorInput, location = modeInput == MODE_1 ? location.absolute : modeInput == MODE_3 ? location.abovebar : location.top)
plotchar(series = os_trend_start ? BULL_SIGNAL_LOC : na, char = "◠", color=bullColorInput, location = modeInput == MODE_1 ? location.absolute : modeInput == MODE_3 ? location.belowbar : location.bottom)


// exhaustion expiration (show dots as we wait for %R conditions to possibly reset and we are bearish/bullish after expiration)
bool bear_expriation = ta.barssince(ob_reversal) < ta.barssince(overbought) and ta.barssince(ob_reversal) < ta.barssince(os_reversal) //and not overbought
bool bull_expriation = ta.barssince(os_reversal) < ta.barssince(oversold) and ta.barssince(os_reversal) < ta.barssince(ob_reversal) //and not oversold
plotshape(series = plotExpirationInput and bear_expriation ? BEAR_SIGNAL_LOC : na, title = "Bearish Expiration", style = shape.circle, color = bearColorInput, location = modeInput == MODE_1 ? location.absolute : modeInput == MODE_3 ? location.abovebar : location.top)
plotshape(series = plotExpirationInput and bull_expriation ? BULL_SIGNAL_LOC : na, title = "Bullish Expiration", style = shape.circle, color = bullColorInput, location = modeInput == MODE_1 ? location.absolute : modeInput == MODE_3 ? location.belowbar : location.bottom)


// Alerts
if (ob_reversal)
    alert(message = bullReversalTxt, freq = alert.freq_once_per_bar_close)
if (os_reversal)
    alert(message = bearReversalTxt, freq = alert.freq_once_per_bar_close)
if (ob_trend_start)
    alert(message = bullStartTxt, freq = alert.freq_once_per_bar_close)
if (os_trend_start)
    alert(message = bearStartTxt, freq = alert.freq_once_per_bar_close)
if (cross_bull)
    alert(message = bullCrossTxt, freq = alert.freq_once_per_bar_close)
if (cross_bear)
    alert(message = bearCrossTxt, freq = alert.freq_once_per_bar_close)

alertcondition(condition = ob_reversal, title = "Arrow Down (Bearish Reversal)", message = "Arrow Down: Overbought trend is exhausted")
alertcondition(condition = os_reversal, title = "Arrow Up (Bullish Reversal)", message = "Arrow Up: Oversold trend is exhausted")
alertcondition(condition = ob_trend_start, title = "Overbought Trend Started", message = "Warning: Possible overbought trend exhaustion")
alertcondition(condition = os_trend_start, title = "Oversold Trend Started", message = "Warning: Possible oversold trend exhaustion")
alertcondition(condition = cross_bull, title = "Bullish Crossover", message = "Potential bullish crossover printed")
alertcondition(condition = cross_bear, title = "Bearish Crossover", message = "Potential bearish crossover printed")


bool startLongDeal = false
bool startShortDeal = false
bool endLongDeal = false
bool endShortDeal = false

switch strategyEntryInput
    STRATEGY_1 =>
        if ob_trend_start and longDealsEnabled
            startLongDeal := true
        else if os_trend_start and shortDealsEnabled
            startShortDeal := true
    STRATEGY_2 =>
        if os_trend_start and longDealsEnabled
            startLongDeal := true
        else if ob_trend_start and shortDealsEnabled
            startShortDeal := true

    STRATEGY_3 =>
        if ob_reversal and shortDealsEnabled
            startShortDeal := true
        else if os_reversal and longDealsEnabled
            startLongDeal := true

    STRATEGY_4 =>
        if os_reversal and shortDealsEnabled
            startShortDeal := true
        else if ob_reversal and longDealsEnabled
            startLongDeal := true

    STRATEGY_5 =>
        if cross_bull and longDealsEnabled
            startLongDeal := true
        else if cross_bear and shortDealsEnabled
            startShortDeal := true

// Use this signal in scripts like "Template Trailing Strategy" and "Signal Composer" that can use its value
// Emit the current signal value according to the "two channels mod div" convention
plot(series = conv.getSignal(conv.DealConditions.new(startLongDeal, startShortDeal)), title = '🔌Signal to TTS', color = color.olive, display = display.data_window + display.status_line)

// debug speed!!
//import PineCoders/LibraryStopwatch/1 as sw
//[timePerBarInMs, totalTimeInMs, barsTimed, barsNotTimed] = sw.stopwatchStats()
//msElapsed = sw.stopwatch()
// Data window debugging
//plotchar(msElapsed,'ms elapsed', '') 
//plotchar(timePerBarInMs,'time per bar in ms','')
